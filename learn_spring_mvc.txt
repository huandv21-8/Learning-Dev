

*********** Java EE ********
- "Java EE" tên đầy đủ là "Java Enterprise Edition" dịch sang tiếng việt có nghĩa là là "Java Phiên Bản Doanh Nghiệp",
 nó là một nền tảng (platform) dành cho việc xây dựng các ứng dụng (application) cấp doanh nghiệp.



********** SPRING **********
- Spring Framework là một khung Java EE được sử dụng rộng rãi để xây dựng các ứng dụng.
	+ Spring boot là 1 module của Spring framework được sử dụng rộng rãi để phát triển các REST APIs.
	+ Spring MVC là 1 module của Spring framework với mục đích chính của nó là xây dựng các ứng dụng web dựa trên mô hình MVC (Model - View - Controller)


********** Mô hình three tiers ************
     - 3-Tiers có tính vật lý (physical): là mô hình client-server (mỗi tier có thể đặt chung 1 nơi hoặc nhiều nơi, kết nối với nhau qua Web services, WCF, Remoting...).
        + Presentation tier bao gồm các thành phần phần xử lý giao diện Graphic User Interface (GUI)
        + Business tier gồm các thành phần Business Logic Layer (BLL), Data Access Layer (DAL) và Data Tranfer Object (DTO): xem thêm phần 3-layers
        + Data tier lưu trữ dữ liệu, là các hệ quản trị CSDL như MS SQL Server, Oracle, SQLite, MS Access, XML files, text files,...
		
**************************
 - sitemesh decorator : tùy chỉnh giao diện
 
 ************************** SPRING *******************************
 - Spring Framework cung cấp khoảng 20 mô-đun có thể được sử dụng dựa trên yêu cầu ứng dụng: data access/ integration, web(mvc/remoting), core container
 - Hibernate là một triển khai của JPA và sử dụng kỹ thuật ORM.
 - Dependency injection : là khi người dùng có 1 class mà họ ko cần khai báo class đó nhưng họ có thể tiêm các giá trị cho các biến trong  các class đó.
 - IoC là nơi chứa class mà cho phép các bạn tiêm vào.
 - CÓ 3 cách tạo bean: + dùng @Configuration
                       + dùng @Controller, @Service , @Repository, @Controller
					   + dùng file xml.
 - @Bean:  Mỗi bean đại diện cho một đối tượng, được lưu trong IoC
 - vòng đời bean: init-method và destroy-method;
    + init-method: tụ động chạy khi file bean đc load
	+ destroy-method: chạy khi context được đóng.
 - @autowired : Tự động nhúng các bean được Spring Container sinh ra vào Class có khai báo @Autowire
 - @Configuration : @Configuration sẽ khai báo một hoặc nhiều @Bean method trong class đó
 - @component: khi run project thì spring sẽ chạy qua hết các class có anotation @component và lưu các bean vào kho chứa (IoC)
 - @ComponentScan: để thông báo Spring Container biết phải vào package nào trong dự án để quét các Annotation và tạo Bean. 
    ví dụ : @ComponentScan(basePackages = "levunguyen.spring ")   // Spring sẽ quét tất cả các file trong package levunguyen.spring
	        Tìm các Class có annotation để tạo bean và các @autowire để nhúng bean ở trong container vào các Class sử dụng autowire
 - @scope: @Scope ở đây là phạm vi bean được sinh và và bị phá huỷ dưới sự quản lý của Spring Container
 - @controller: Một class được đánh dấu là @Controller thì để khai báo Class đó là một controller và có nhiệm vụ mapping request trên url vào các method tương ứng trong controller.
 - @RequestMapping: Có nhiệm vụ ánh xạ các request (yêu cầu) người dùng vào method tương ứng trong controller.
 - @ModelAttribute: Chúng ta sử dụng ModelAttribute như một cầu nối giữa Controller và View. Từ Controller chúng ta truyền các dữ liệu qua cho View thông qua ModelAttribute.
 - @SessionAttribute: Chúng ta sử dụng @SessionAttribute để lưu trữ các giá trị trong một phiên làm việc
 
 ****************design pattern****************************
Design Patterns - Factory Pattern
Design Patterns - Singleton Pattern
Design Patterns - Composite Pattern
Design Patterns - Facade Pattern
Design Patterns - MVC Pattern
Design Patterns - Observer pattern
Design Patterns - Strategy Pattern
Design Patterns - Repository Pattern
 
- Signleton pattern:  tạo 1 đối tượng dùng xuyên suốt trong dự án.
- Composite Pattern : cây thư mục:
   ví dụ: public class Employee {
      private String name;
      private int salary;
      private List<Employee> subordinates; (đây là cây thư mục) }
- Factory Pattern: giống tính đa hình trong oop
- Facede pattern: 



********Rest Api/ Soap Api***************
-khác nhau:
 +rest: gọi api đc bên fontend,  api có thể giống nhau (khác method), dữ liệu thường trả về là json
 +soap: chỉ gọi đc bên Backend, ko hỗ trợ các method, dữ liệu trả về là xml
 
 
********** Hibernate ****************
   -sessionFactory : hỗ trợ khởi tạo đối tượng session
   -session : là đối tượng dùng để hỗ trợ tạo và thực thi câu lệnh sql
   
   
************ authen vs author *******************
 - Authentication (Who you are ? ) là xác thực, chỉ quá trình định danh (hay xác định) một tài khoản đang vào hệ thống chính là người đó chứ không phải ai khác
 - Authorization (What you can do ? ) là danh tính, xác định role của người mà đã được authen, xem họ có chức năng gì, và được phép làm gì trong hệ thống.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
