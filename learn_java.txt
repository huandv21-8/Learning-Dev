
************* OOP ***************
	- Đóng gói
		+ Đóng gói các thuộc tính, chức năng của đối tượng vào 1 class và  quản lý quyền truy cập bằng access modifiers
		+ Bảo vệ đối tượng không bị truy cập từ code bên ngoài vào để thay đổi các giá trị thuộc tính của đối tượng. Bảo đảm sự bảo mật, toàn vẹn của đối tượng.
	- Kế thừa:
		+ Lớp con kế thừa các thuộc tính, chức năng của lớp cha -> tái sử dụng code
	- Trừu tượng
		+ Cho phép tạo ra các lớp trừu tượng mà không cần định nghĩa chi tiết cách thức thực thi của các phương thức
		+ Ẩn đi các chi tiết triền khai của method và chỉ hiển tính năng (response) tới người dùng
		+ Tính trừu tượng giúp bạn tập trung vào những cốt lõi cần thiết của đối tượng thay vì quan tâm đến cách nó thực hiện.
		+ sử dụng abstract class và abstract interface để có tính trừu tượng.
	- Đa Hình
		+ Cho phép 1 phương thức có nhiều cách thực thi khác nhau dựa trên đối tượng mà nó được gọi
		+ Có thể thực hiện đa hình bằng 2 cách ghi đè và nạp chồng.
		+ nạp chồng (overloading): Method overload xảy ra khi các method có cùng tên nhưng khác tham số truyền vào
		+ ghi đè (overriding): định nghĩa lại phương thức của lớp cha

************* AOP ***************
- Là kỹ thuật lập trình chia nhỏ chương trình thành các module riêng rẽ, ko phụ thuộc vào nhau.
  Khi hoạt động thì sẽ kết hợp các module lại để thực hiện chức năng, nhưng khi sửa đổi thì chỉ cần sửa đổi trên 1 module cụ thể.
	Ví dụ: thực hiện chức năng insert bản ghi vào DB thì có thể bao gôm những nhiệm vụ như: Ghi log, mở/đóng transaction, xứ lý exception,...
		Sử dụng AOP thì sẽ tách những nhiệm vụ trên thành các module riêng biệt, và gộp các module đó lại thì được chức năng insert.
		Cho dù có sửa 1 trong các module thì các module còn lại cũng không ảnh hưởng.

****** stack memory và heap menory*********
- Stack Memory: 
	+ Hoạt động theo cơ chế LIFO, 
	+ Lưu các BIẾN cục bộ, các kiểu dữ liệu nguyên thủy, BIẾN tham chiếu (References) đến các đối tượng (ví dụ: String s = "hello"; thì biến s lưu trên Stack, còn đối tượng "hello" lưu trên Heap).
- Heap Memory:
	+ Là một vùng bộ nhớ lớn hơn và linh hoạt hơn, khi một đối tượng được tạo bằng từ khóa new, nó sẽ được cấp phát không gian trong Heap.
	+ Lưu tất cả các đối tượng (Objects), mảng (array), String Pool


********** Serialization và Deserialization*************
- Serialization: chuyển đổi object thành chuỗi byte
- Deserialization: chuyển đổi chuỗi byte thành object
	-> mục đích dùng là do khi trao đổi dữ liệu giữa các module khác nhau thì dữ liệu ở dạng byte chứ không phải object



************* STATIC, Final***********
- static: 
	+ có thể hiểu nó là biến, method dùng chung. Chỉ khởi tạo 1 lần khi load class và dùng xuyên suốt cho đến khi kết thúc chương trình.
	+ mothod static chỉ gọi được các hàm và biến là static.
- final: 
	+ biến: khai báo hằng số, ko thể thay đổi giá trị
	+ method: không thể bị ghi đè (override)
	+ class: không thể được kế thừa

 ************* java 8 *****************
  - có lamdal  : giúp code nhanh hơn, ngắn gọn hơn
  - có Functional interface : có 1 method duy nhất (hay dùng với lamdal) và đc dùng với annotation @FunctionalInterface (có thể có thêm các method không trừu tượng bằng từ khóa default trong Java 8)
  - có streams api  : Stream là 1 lớp trừu tượng mới được giới thiệu trong Java 8 giúp ta giải quyết các bài toán về collections, array 1 cách tự nhiên hơn như thêm, sửa, xóa, lọc object…
  - có các method default trong interface  (Các phương thức mặc định)  : method có body, ko cần override method default trong class mà implements interface đó.
  - có date and time apis
  - optional class : các biến được sử dụng thông qua Optional Class sẽ tránh được lỗi NullPointerException.


**************** Collection **********************
	Có 2 loại cơ bản của Java Collections:
		+ Collection Interface: 
			- List : danh sách các phần tử trong đó có thể được trùng lắp
				ArrayList:lưu trữ các phần tử tương tự nhau, các phần tử có thể được truy cập và thay đổi một cách dễ dàng bằng cách sử dụng index, tự động mở rộng mảng
				LinkedList: các phần tử được liên kết với nhau thông qua các địa chỉ bộ nhớ, Các phần tử có thể được chèn hoặc xóa bất kỳ lúc nào.
				Vector: Giống với ArrayList nhưng được đồng bộ ( tại 1 thời điểm chỉ có thể 1 thread được truy cập)
			- Set : lưu trữ các phần tử không trùng lặp và không có thứ tự cụ thể. -> dùng hashCode và equals để loại bỏ trùng lặp
				HashSet: lưu trữ các phần tử không có thứ tự
				LinkedHashSet: duy trì thứ tự của các phần tử được thêm vào (FIFO)
				TreeSet: lưu trữ các phần tử theo thứ tự tăng dần hoặc giảm dần
			- Queue : lưu trữ và quản lý các phần tử theo thứ tự First in, First out (FIFO)
		+ Map Interface: biểu diễn một tập hợp các phần tử theo cặp key-value,
				LinkedHashMap: kế thừa HashMap, lưu giữ theo thứ tự chèn vào.
				TreeMap: tự động sắp xếp các phần tử theo thứ tự tăng dần hoặc giảm dần của key
				hashMap:  cho phép một key là null và nhiều giá trị null.
				hashTable: không cho phép bất kỳ key hoặc giá trị null.

  - stack: vào sau ra trước
  - queue : vào trước ra trước
  
  
***************** compile time và run time ****************
   - run time: là thời điểm chương trình đang chạy   (override)
   - compile time: là thời điểm source code đang được compile   (overloading)
   - Thông thường run time và compile time được nhắc tới khi nói tới lỗi. Lỗi run time tức là lỗi khi chạy mới thấy, tức lỗi logic. Lỗi compile time là lỗi compile là thấy ngay, tức là lỗi cú pháp.
   

**************** JVM, JRE, JDk **********************
   – JVM là một thiết bị trừu tượng (ảo) có thể giúp máy tính chạy các chương trình Java.
   – JRE được sử dụng để cung cấp môi trường runtime. Nó là trình triển khai của JVM.
   – JDK (là viết tắt của Java Development Kit) bao gồm JRE và các Development Tool.


*************** OCA **********************************
Chapter 1: Tổng quan
	- java packages là cơ bản, và javax packages là mở rộng
	- Comment:   có 3 cách comment : 1 dòng "//", nhiều dòng "/**/", và javadoc "/** */"
	- File java: kết thúc bằng .java
		+ 1 file java có thể định nghĩa nhiều class, và nhiều nhất chỉ 1 class được public ( có thể ko có class nào được puclic )
		+ Trong 1 class sẽ chạy theo thứ tự fields, function, contructor ( hết các fields rồi mới đến function, hết function rồi mới đến contructor) 

	- Package and import
		+ Package được xuất phát từ java hoặc javax -> thuộc thư viện của JDK, nếu khác thì là ngoài JDK
		+ import java.util.*; ( ví dụ cách import nhiều class trong 1 package hoặc có thể import cụ thể từng class)
		+ gói java.lang ko cần import ( ko bắt buộc)
		+ Phải import cụ thể tên class nếu có 2 lớp trùng tên nhưng ở package khác. ( Ví dụ: import java.util.Date; import java.sql.Date; )

	- Initializer Blocks: Khối khởi tạo: code giữa các dấu ngoặc nhọn là một khối khởi tạo ({})
		+ các khối có thể chứa các khối khác.
		+ contructor không phải là khối khởi tạo

	- Java có 2 kiểu dữ liệu là primitive type ( kiểu nguyên thủy ) và reference type ( kiểu tham chiếu) 
		+ kiểu nguyên thủy có 8 loại. và 8 loại này đều có kiểu bao bọc ( ánh xạ tới Byte, Short, Integer, Long, Float, Double, Boolean, Character) ( Mỗi loại số sử dụng gấp đôi số bit so với loại tương tự nhỏ hơn. ví dụ : 1long = 2int = 4short = 8byte
		+ Không thể sử dụng kiểu nguyên thủy cho các colection ( array, ...) mà phải sử dụng kiểu bao bọc.
		+ example về int vs long: nếu khai báo là long và giá trị lớn hơn kiểu int thì phải thêm kí hiệu L ( long a = 1878234356546L), nếu không có thì sẽ đang compile là kiểu int và sẽ error.
		+ example về float vs double: nếu khai báo float thì phải có kí hiệu là f ( float a= 12.4f), nếu không có sẽ compile error tại vì float sẽ được giả định là double nếu không thêm kí hiệu "f"
		+ kiểu nguyên thủy luôn có default value, không thể null và không có method. Kiểu tham chiếu có thể null
		+ Kiểu tham chiếu sẽ lưu địa chỉ ô nhớ ( nơi đặt đối tượng, nơi lưu trữ dữ liệu ) ->  khái niệm con trỏ.
		+ Có 5 kiểu tham chiếu trong java: array, class, interface, annotation, Enumeration

	- Khai báo và khởi tạo :
		+ example về khai báo và khởi tạo: int i1, i2, i3 = 0 ( có 3 biến được khai báo nhưng chỉ có 1 biến được khởi tạo (i3) )
		+ example về khai báo: int num, String value; // DOES NOT COMPILE ( không được khai báo 2 hoặc nhiều biến khác kiểu dữ liệu trên 1 khai báo )
		+ tên biến có thể gồm các chữ cái, số , ký tự "$" hoặc "_". và không được bắt đầu bằng số. và không được sử dụng keyword trong java làm tên biến ( có thể sử dụng tên class như Integer, Double,..)
		+ biến local ( trong method) không có default value và compile error nếu dùng mà không khởi tạo
		+ Biến khai báo trong method Main là biến local

	- Lớp bao bọc ( Wrapper class ) và kiểu nguyên thủy
		+ lớp bao bọc được viết hoa và bao bọc các kiểu nguyên thủy.
		+ lớp bao bọc được sử dụng như 1 object ( đối tượng )
		+ method để chuyển đổi:
			parseInt(): chuyển đổi một chuỗi String về một giá trị nguyên thủy, được gọi từ lớp bao bọc (ví dụ: int a = Integer.parseInt(number); )
			intValue(): chuyển đối tượng bao bọc về một giá trị nguyên thủy nhưng nó được dùng cho đối tượng đã xác định.
			valueOf(): chuyển đổi giá trị nguyên thủy hoặc một chuỗi String về một đối tượng bao bọc
			trường hợp không chuyển đổi được sẽ throw NumberFormatException

	- Thu gom rác : Garbage Collection
		+ Một đối tượng đc thu gom rác khi : không còn bất kì tham chiếu nào trỏ tới và tất cả các tham chiếu đã vượt quá phạm vi.
		+ finalize() có thể không được gọi hoặc là chỉ có thể gọi duy nhất 1 lần ( không thể gọi nhiều hơn 1 ) và cuối cùng là nó không được chạy theo yêu cầu ( có trường hợp kể cả gọi nó cũng không chạy )

Chapter 2: Toán tử
	- Rule:
		+ Sử dụng toán tử với 2 giá trị khác kiểu dữ liệu thì sẽ auto return về kiểu dữ liệu lớn hơn 
			( ví dụ 1 : int a = 4; long b = 5L; a+b --> return long )
			( ví dụ 2: double a = 5.5; float b = 8.6f; a+b --> return double )
		+ Sử dụng toán tử với số nguyên ( byte, short, int, long ) và số thập phân ( float, double) thì sẽ auto return về số thập phân.
			( ví dụ: long a = 3L; float b = 4.5f; a+b --> return float)
		+ Với những kiểu dữ liệu nhỏ như short, char, byte, lần đầu sử dụng toán tử sẽ được thăng cấp thành int,
			( ví dụ : short a = 3; byte b = 5; a+b --> return int )

	- Toán tử gán:
		+ Không thể gán kiểu dữ liệu lớn hơn sang nhỏ hơn ( có thể gán ngược lại nhỏ -> lớn ) -> giải pháp là ép sang kiểu dữ liệu nhỏ hơn hoặc ép từ dạng số nguyên sang kiểu thập phân
			( ví dụ 1: short a= (short) 1921222; )
			( ví dụ 2: int b = (int) 9.9f; )

	- Toán tử logic: cho 2 biến boolean: a, b
		+ Toán tử &: return true nếu cả a và b đều là true
		+ Toán tử |: return false nếu cả a và b đều là false
		+ toán tử ^: return true nếu a và b trái nhau ( a: true và b: fasle hoặc a: false và b : true )
		+ khác nhau & và &&: ( chỉ áp dụng cho việc check null của tham chiếu và sử dụng luôn tham chiếu đó )
			 && : nếu vế trái đã xác định và đánh giá được kết quả thì sẽ bỏ qua vế phải
			 & : sẽ đánh giá cả 2 vế trái và phải
			 ( ví dụ 1: if(x != null & x.getValue() < 5) trong trường hợp này nếu x là null thì sẽ gây chết chương trình vì sẽ đánh giá tiếp cả vế phải )
			 ( ví dụ 2: if(x != null && x.getValue() < 5) trong trường hợp này nếu x là null thì kết quả của biểu thức sẽ là false luôn và ko đánh giá vế phải )
 
	- Toán tử == và !=
		+ So sánh 2 kiểu số nguyên và thập phân. Nếu 2 kiểu dữ liệu khác nhau thì kiểu dữ liệu sẽ được thăng cấp (
			( ví dụ: 5==5.0 => true vì 5 lúc này sẽ được thăng cấp lên kiểu dữ liệu là double )
		+ So sánh 2 giá trị boolean
		+ So sánh 2 giá trị object, bao gồm cả null và giá trị String 
		+ Không thể so sánh các kiểu sau đây với nhau:
			 String với int, float, double,...
			 String với boolean
			 boolean với int, float, double,..

	- Câu lệnh rẽ nhánh ( if-else )
		+ Trong 1 khối lệnh if-then-else thì chỉ được thực thi trong một nhánh, không có chuyện 2 nhánh trở lên được thực thi
		+ điều kiện trong mệnh đề if phải là boolean và chỉ có thể sử dụng toán tử gán ( = ) khi kiểu dữ liệu là boolean
		+ nếu câu lệnh if không có dấu {} thì chỉ có câu lệnh đầu tiên sau câu lệnh if sẽ thuộc câu lệnh if. Những câu tiếp theo sẽ không thuộc if, kể cả có thụt đầu dòng đi chăng nữa. Tương tự với else

	- Câu lệnh switch-case
		+ kiểu dữ kiệu của các case sẽ phải phù hợp với kiểu của switch
		+ Giá trị của case phải là hằng số hoặc hằng số enum, hoặc final ( có nghĩa là không thể thay đổi nữa). Nếu khai báo trong 1 biến thì biến đó phải gán final
		+ Nếu không có case nào phù hợp thì default sẽ được gọi, nếu không có default thì tất cả các case sẽ được bỏ qua.
		+ Điều kiện của switch không hỗ trợ kiểu boolean và Long hoặc float, double
		+ case default sẽ được đặt ở bất cứ đâu trong switch, và nếu default không được đặt ở cuối và không có break thì case tiếp theo vẫn được thực thi cho đến khi có break

	- Vòng lặp:
		+ vòng for cơ bản:
			 Phần điều kiện của vòng for cơ bản gồm 3 phần: khởi tạo, kiểm tra điều kiện, và cập nhật khởi tạo.Các phần này sẽ không bắt buộc nhưng bắt buộc phải có dấu chấm phẩy (;)
			 Khi khai báo nhiều hơn 1 biến trong khối khởi tạo, kiểu dữ liệu của các biến phải cùng loại data type ( cùng int, hoặc cùng float, ... )
			 Phần khởi tạo và cập nhật có thể có nhiều câu lệnh phân tách bằng dấu phẩy (,)
			 Thứ tự thực hiện: 1.khởi tạo biến -> 2.kiểm tra điều kiện -> 3.thực thi body -> 4.cập nhật lại biến khởi tạo-> 5.quay lại bước 2
		+ Vòng lặp while: 1.kiểm tra điều kiện, nếu là true -> 2.thực thi khối lệnh trong while
		+ Vòng lặp do-while : 1.thực hiện khối lệnh trong do -> 2.kiểm tra điều kiện, nếu là true -> 3.lặp lại step 1 ( thực thi ít nhất 1 lần )

	- Labels:
		+ Thường được dùng trong vòng lặp lồng nhau
		+ Thường được viết hoa và kết thúc bằng dấu (:)
		+ Thường được dùng để break ra ngoài vòng lặp mà bạn muốn break

	- Break:
		+ Dùng để dừng luồng hiện tại và chuyển sang luồng tiếp theo
		+ Không dùng trong câu lệnh rẽ nhánh

	- Continue: 
		+ DÙng để dừng vòng lặp hiện tại
		+ Không dùng trong switch
	Chỉ được break hoặc continue labels khi câu lệnh break hoặc continue thuộc vòng lặp đó.

Chapter 3: Core Java APIs
	- Thao tác với String:
		+ Nối chuỗi ( + )
			 Nếu hai toán tử là số -> phép cộng
			 Néu hai toán tử lá string -> phép nối
			 Được thực hiện từ trái qua phải
		+ Tính bất biến 
			 String là bất biến ( không thể thay đổi được giá trị trong string pool sau khi tạo )
			 Sử dụng hàm concat() để nối chuỗi trong Java thì phải gán lại giá trị khi nối xong. Nếu không gán thì nó chỉ tạo ra một chuỗi khác và và chưa được gán chuỗi mới vào tham chiếu bán dầu
				( ví dụ: String a = "1"; a.concat("2") --> output: a = 1 )
		+ String pool
			 Thuộc JVM ( java virtual machine )
		+ Method quan trọng trong String
			 length(): đếm kí tự chuỗi
			 charAt(): trả về kí tự theo index, trường hợp không tồn tại giá trị theo index thì trả về exception java.lang.StringIndexOutOfBoundsException --> ví dụ : string.charAt(0)
			 indexOf(): tìm kiếm theo kí tự và trả về index. Trả về -1 nếu không tìm thấy, có thể tìm một kí tự hoặc một chuỗi và cũng có thể bắt đầu từ 1 vị trí --> ví dụ: string.indexOf("al") hoặc string.indexOf('a', 4) 
			 substring(): tìm kiếm các kí tự trong một chuỗi và trả về các phần của chuỗi. Tham số đầu tiên là index bắt đầu của chuỗi được trả về và tham số thứ hai là index để kết thúc. Trường hợp index đầu và index cuối trùng nhau thì trả về empty --> ví dụ : string.substring(7, 7);
			 toLowerCase(): chuyển kí tự thành chữ thường, kí tựu khong phải chữ sẽ được giữ lại, và vì string là bất biến nên chuỗi ban đầu vẫn giữ nguyên
			 toUpperCase(): chuyển kí tự thành chữ hoa, kí tựu khong phải chữ sẽ được giữ lại, và vì string là bất biến nên chuỗi ban đầu vẫn giữ nguyên
			 equals(): so sáng nội dung của 2 chuỗi và phân biệt chữ hoa chữ thường.
			 equalslgnoreCase(): so sánh nội dung của 2 chuỗi và không phân biệt chữ hoa chữ thường.
			 startsWith(): Kiểm tra kí tự ĐẦU TIÊN của chuỗi và phân biệt chữ hoa chữ thường --> ví dụ : "abc".startsWith("A") -> return false
			 endsWith(): Kiểm tra kí tự CUỐI CÙNG của chuỗi và phân biệt chữ hoa chữ thường --> ví dụ : "abc".endsWith("c") -> return true
			 contains(): Kiểm tra kí tự trong một chuỗi ( bất cứ đâu trong chuỗi) và phân biệt chữ hoa chữ thường --> ví dụ: "abcd".endsWith("bC") -> return false
			 replace(): tìm kiếm và thay thế chuỗi hoặc kí tự
			 trim(): loại bỏ khoảng trắng trước và sau chuỗi ( bao gồm cả xuống dòng và tab)

	- StringBuilder
		+ StringBuilder không phải bất biến ( có thể thay đổi được giá trị sau khi tạo )
		+ Có 3 loại khởi tạo stringBuilder: 
			StringBuilder sb1 = new StringBuilder();
			StringBuilder sb2 = new StringBuilder("animal");
			StringBuilder sb3 = new StringBuilder(10);  // 10 là dung lượng của được set của chuỗi, 
		+ Dung lượng mặc định của stringBuilder là 16 và có thể set cho nó ( ví dụ trên thì dung lượng là 10 ). Nếu được append chuỗi dài hơn thì dung lượng này sẽ tự dộng tăng lên
		+ Method quan trọng trong StringBuilder
			 append(String str): nối chuỗi và trả về tham chiếu ban đầu
			 insert(int index, String str): chèn ký tự tại index được yêu cầu và trả về tham chiếu ban đầu
			 delete(int start, int end): xóa ký tự từ vị trí index start đến end và trả về tham chiếu ban đầu
			 deleteCharAt(int index): xóa ký tự tại index và trả về tham chiếu ban đầu. Trường hợp không tồn tại ký tự tại vị trí index thì throws StringIndexOutOfBoundsException.
			 reverse(): đảo ngược chuỗi và trả về tham chiếu ban đầu.
		+StringBuilder vs StringBuffer
			 StringBuffer giống với StringBuilder về cách sử dụng những sẽ chậm hơn vì nó an toàn về luồng.
	- String vs StringBuffer vs StringBuilder khi so sánh == sẽ ko compile do khác type
	
	equals và == với String và StringBuilder
		 Sử dụng == với String sẽ so sánh địa chỉ ô nhớ
		 Sử dụng equals với String sẽ so sánh các ký tự có giống nhau hay không
		 Sử dụng == và equals với StringBuilder sẽ kiểm tra tham chiếu có đang trỏ đến cùng 1 đối tượng hay không

	- Arrays
		+ arrays không thể thay đổi được kích thước mảng( không thể add thêm hoặc xóa phần tử vào một mảng sau khi đã khai báo)
		+ array là một vùng nhớ trên heap( [] )
		+ Tạo 1 mảng nguyên thủy: int[] numbers = new int[3]; ( 3 là size của mảng )
			 Tạo 1 mảng có các phần tử được chỉ định cụ thể thì sẽ không có size mảng hoặc ngược lại
		+ Tạo 1 mảng tham chiếu:
			 Khi print 1 mảng thì sẽ có ký tự [L ở đầu
		+ Hàm trong array
			 sort(): sắp xếp
			 binarySearch(): tìm kiếm. ->Khi không tìm thấy index trong mảng thì sẽ sắp xếp phần tử đó trong mảng rồi lấy phủ định index sau khi sắp xếp rồi  trừ thêm 1 -> sẽ tìm được index. Trường hợp mảng chưa sắp xếp sẽ không dự đoán được kết quả trả về ( nên chọn đáp án đầu ra không xác định được )
			 Mảng là đối tượng, các thành phần của mảng có thể là đối tương -> có thể chứa mảng trong mảng
		+ Mảng đa chiều: 
			 Mỗi cặp [] được xác định là 1 chiều ( ví dụ: int[] arr[][]; -> khai báo mảng 3D ( 3 chiều ) )

	- ArrayList
		+ Collection nằm trong gói java.util
		+ được extends AbstractList và AbstractList lại implements từ List, -> ArrayList là một List
		+ interface List không thể được khởi tạo
		+ không được định nghĩa type là kiểu nguyên thủy, phải là tham chiếu hoặc các lớp bao bọc (wrapper class)
		+ Khi chuyển đổi Arrays thành List, thì độ dài của List sẽ không thể thay đổi ( không thể xóa hoặc thêm 1 phần tử vì độ dài của Arrays không thay đổi) nếu cố tình thay đổi độ dài của List hoặc Arrays thì sẽ throw UnsupportedOperation. Và khi thay đổi giá trị phần tử của Arrays thì đồng thời giá trị của List cũng thay đổi và ngược lại
		+ method của ArrayList:
			 add(): dùng để insert một phần tử mới vào mảng, nếu không chỉ định loại type cho ArrayList thì chúng ta có thể add bất kì giá trị nào vào mảng và khi đó type của nó là Object ( bao gồm mọi loại type ngoại trừ nguyên thủy )
			 remove(): xóa phần tử đầu tiên của mảng hoặc xóa tại 1 index được chỉ định,nếu parameter truyền vào là int thì sẽ xóa theo index, còn nếu là Integer thì sẽ xóa theo giá trị, trường hợp ko tìm được index để remove thì throw IndexOutOfBoundsException
			 set(): Thay đổi các phần tử mà không thay đổi kích thước. không tìm thấy index để replace thì sẽ throw IndexOutOfBoundsException
			 isEmpty(): return boolean, dùng để kiểm tra mảng có empty hay không 
			 size(): kiểm tra độ dài của mảng đã được sử dụng
			 clear(): dùng để loại bỏ tất cả các phần tử trong mảng
			 contain(): kiểm tra 1 giá trị có tồn tại trong mảng hay không, sử dụng equals() trên từng phần tử của mảng để so sánh
			 equals(): dùng để so sánh 2 mảng
		+ Autoboxing:
			 trường hợp add một giá trị null vào mảng và sau đó sử dụng nó với mục đích khác thì sẽ throw NullPointerException

	- Dates and Times
		+ Hầu hết nằm trong package java.time.*
		+ Các lớp Dates va Times đều là bất biến ( không thay đổi giá trị trừ khi gán lại )
		+ OCA gồm 3 loại
			 LocalDate: bao gồm năm tháng ngày (yyyy-MM-dd)
			 LocalTime: bao gồm giờ phút giây nano-giây(HH:mm:ss.SSS)
			 LocalDateTime: bao gồm năm tháng ngày giờ phút giây nano-giây (yyyy-MM-dd'T'HH:mm:ss.SSS). sử dụng "T" để tách ngày và giờ khi chuyển đổi thành chuỗi
			 ZonedDateTime: sử dụng theo múi giờ
		+ Cả 3 lớp LocalDate, LocalTime, LocalDateTime đều có method static of để tạo thời gian. Và không có hàm tạo, và phải sử dụng method of() để tạo thời gian.
			 Ví dụ: LocalDate d = new LocalDate(); // DOES NOT COMPILE
		+ Lớp Period
			Sử dụng các đơn vị năm, tháng và ngày để biểu thị một khoảng thời gian dài hơn
			Không thể nối nhiều method khi tạo Period vì các method của Period.ofXXX là static. Và nếu cố tình nối thì chỉ method cuối cùng mới được áp dụng.
				Ví dụ :  Period wrong = Period.ofYears(1).ofMonths(2).ofDays(8); --> chỉ method ofDays mới được áp dụng và khi đó ngày sẽ là 8, còn tháng và năm sẽ bằng 0
		+ Lớp Duration
			Sử dụng các đơn vị ngày, giờ ,phút, giây, nano-giây biểu thị một khoảng thời gian nhỏ hơn
			Duration cũng giống như Period, khác mỗi Duration biểu thị một khoảng thời gian ngắn hơn, còn Period để biểu thị một khoảng thời gian dài hơn
		+ Sử dụng Period và Duration
			LocalDate thì sẽ sử dụng với Period, nếu dùng Duration thì throw UnsupportedTemporalTypeException
			LocalTime thì sẽ sử dụng với Duration, nếu dùng Period thì throw UnsupportedTemporalTypeException
			LocalDateTime sử dụng được cả Period và Duration
		+ Format Dates và Times
			Sử dụng để trả về định dạng thời gian
			Sử dụng lớp DateTimeFormatter thuộc package java.time.format
			Có 2 loại format thời gian:  các trường hợp xác định trước format và FormatStyle theo ý muốn
			Với các trường hợp xác định trước
				Có nhiều định dạng ngày giờ với 2 tiêu chuẩn ISO và RFC
					Ví dụ: DateTimeFormatter.ISO_LOCAL_DATE.format(LocalDate.of(2018, 3, 9)); -> return 2018-03-09:
					ISO-8601 là tiêu chuẩn quốc tế về định dạng ngày và giờ.
				Chúng ta có thể sử dụng java.time.format.FormatStyle enum (FULL, LONG, MEDIUM, SHORT) 
			Với FormatStyle : format theo ý muốn.
				Sử dụng ofPattern() để format ngày giờ theo ý muốn. Ví dụ: ofPattern("MMMM dd, yyyy, hh:mm")    // January 08, 2025, 05:12
					MMMM: hiển thị tháng. ví dụ: M output 1, MM output 01, MMM output Jan, MMMM output January
					dd: hiển thị ngày. Ví du: 08
					yyyy: hiển thị năm. Ví dụ: yy output 25, yyyy output 2025
					hh: hiển thị giờ. Ví dụ: 05
				M viết hoa là chỉ tháng, m viết thường là phút
		+ Phân tích Dates và Times
			Sử dung method parse() và cũng cần định dạng format, nếu không có định dạng thì sẽ sử dụng định dạng default

Chapter 4: Methods and encapsulation
	- Designing methods
		+ Access modifiers
			public: có thể truy cập ở mọi class
			protected: chỉ có thể truy cập được khi cùng package hoặc là subclasses
			default: có thể truy cập khi cùng package. Không được khai báo chữ default nếu không sẽ không compile
			private: chỉ có thể truy cập khi cùng class
		+ Optional specifiers
			final: khi method là final thì sẽ không override được ở subclass
		+ Return Type
			Chú ý kiểu trả về đúng type
		+ Method name:
			 Chỉ được chứa chữ cái, số, "$" và "_". Ngoài ra ko được bắt đầu bằng số ( giống tên biến )

	- Làm việc với Varargs
		+ Tham số vararg phải là tham số cuối cùng và mỗi method chỉ có thể có 1 tham số vararg
		+ Tham số vararg có thế được truyền, hoặc không được truyền, hoặc có thể liệt kê các phần tử của vararg khi gọi method

	- static
		+ mục đích là không cần tạo đối tượng cũng có thể gọi được method hoặc field static
		+ method và biến static chỉ gọi được các biến và method là static
		+ Các biến/method static chỉ được khởi tạo một lần, khi bắt đầu tải lớp. Các biến/method này sẽ được khởi tạo trước, trước khi khởi tạo bất kỳ biến instance hoặc method main() nào
		+ Là một biến/method thuộc về lớp chứ không phải đối tượng
		+ Một biến/method có thể được truy cập trực tiếp bằng tên lớp và không cần bất kỳ đối tượng nào.
		+ Value của biến static chỉ được thay đổi khi gán lại giá trị cho nó. kể cả khi đối tượng tham chiếu bị thay đổi thì biến static thuộc class đó cũng không thay đổi nếu không gán lại giá trị cửa biến static
		+ khi đã import biến/method static thì không được sử dụng className.method hoặc className.variable
			Ví dụ: import static java.util.Arrays.asList; --> Arrays.asList("one"); // DOES NOT COMPILE
	- Overloading:
		+ Method overload xảy ra khi các method có cùng tên nhưng khác tham số truyền vào
		+ 2 method với param lần lượt là array và vararg thì không phải overload --> sẽ compile lỗi
	- Constructor
		+ constructor có thể gọi constructor khác bằng cách tạo mới đối tượng ( sử dụng new ) nhưng với cách này sẽ không tạo đối tượng theo ý muốn. Hãy dùng this() ( khi dùng this() thì phải là câu lệnh đầu tiên trong hàm tạo)
	- Lambdas
		+ Không được phép khai báo biến ở trong body có cùng tên với parameter

Chapter 5: Class designer
	- Kế thừa: inheritance
		+ lớp final không được extend
		+ một class to chỉ có thể là public hoặc default
		+ access modifiers của interfaces cũng giống như class
		+ java.lang.Object không có bất kì lớp cha nào
		+ Tất cả các lớp đều được kế thừa từ java.lang.Object
		+ java compile sẽ tự động gọi super() trong hàm tạo con nếu câu lệnh đầu tiên trong hàm tạo không gọi tới hàm tạo cha
		+ Class sẽ tự dộng có 1 hàm tạo không đối số khi class đó chưa có bất kì hàm tạo nào, Khi class đã có hàm tạo có đối số thì hàm tạo không đối số sẽ không còn
		+ Class cha không có hàm tạo không đối số mà class con cũng không có hàm tạo thì sẽ compile error
		+ Nếu class cha có hàm tạo có đối số, thì mỗi hàm tạo của lớp con sẽ phải gọi tới cụ thể hàm tạo có đối số của lớp cha.
		+ super() và super
			 super() chỉ được dùng trong câu lệnh đầu tiên trong hàm tạo của lớp con và dùng để gọi đến hàm tạo của lớp cha
			 super được dùng ở mọi nơi trong lớp con và được dùng để tham chiếu đến một thành viên được định nghĩa trong lớp cha
		+ Khi override phương thức của lớp cha thì method của lớp con phải có khả năng truy cập bằng hoặc dẽ hơn lớp cha ( nếu method của lớp cha là protected thì lớp con phải là protected hoặc public) 
		+ Ẩn phương thức xảy ra khi override method static của lớp cha, và method của lớp cha và lớp con đều phải có từ khóa static

	- Trừu tượng: Abstract
		 class abstract có thể không có method abstract và không thể tạo instance
		 method abstract không có body
		 class, method là abstract thì không được là private hoặc final
		 class được extend lớp trừu tượng thì phải implement các method abstract của lớp trừu tượng

	- Interface:
		interfaces không thể tạo instance 
		interfaces luôn là public kể cả khi không có access modifiers ( là default ) và không thể là final
		interfaces chỉ có thể extend các interfaces khác
		interfaces không thể triển khai method của các interfaces khác khi extend
		Biến interfaces phải là public static final và phải được gán value khi khai báo
		Các method default của interfaces là public và khi khai báo hàm phải có từ khóa "default"
		Các method default không được là static, final và abstract
		Có thể khai báo lại method default dưới dạng method abstract
		method static trong interfaces phải là public
		Muốn gọi method static của interfaces thì phải sử dụng tên của interfaces ( ClassNameInterfaces.method(); )

	- Đa hình: polymorphism
		Khả năng truy cập đến method, thuộc tính của object phụ thuộc vào loại tham chiếu
		Khi gán object con sang tham chiếu là lớp cha thì không cần ép kiểu, ngược lại thì phải ép kiểu
		Nếu bạn gọi một phương thức trên một đối tượng ghi đè một phương thức, thì bạn sẽ nhận được phương thức bị ghi đè, ngay cả khi gọi phương thức là trên một tham chiếu gốc hoặc trong lớp cha.
			Ví dụ: Bird bird = new Peacock(); sẽ gọi đến các phương thức, thuộc tính của lớp Peacock


Chapter 6: Exception
	- Các loại exception
		Exception: gồm có checked exception và unchecked exception
			Checked exception: IOException, SQLException
				Là những ngoại lệ mà trình biên dịch (compiler) bắt buộc bạn phải xử lý.
				Bạn phải khai báo rằng phương thức của bạn có thể ném ra ngoại lệ đó (bằng từ khóa throws) hoặc xử lý nó ngay lập tức (bằng khối try-catch). Nếu bạn không làm vậy, trình biên dịch sẽ báo lỗi.
				Gồm tất cả các exception ngoại trừ runtime exception
				Phải khai báo exception ở method bằng từ khóa throws
			Unchecked exception: 
				Là những ngoại lệ mà trình biên dịch không bắt buộc bạn phải xử lý, thường xảy ra do lỗi lập trình (ví dụ: logic sai, sử dụng sai API)
				Gồm runtime exception
				Không cần phải khai báo bằng từ khóa throws
		Error: Lỗi nghiêm trọng, không nên xử lý (thường do JVM, hệ thống)



***Note:
	Lớp Number không là final class -> có thể extend từ lớp Number
	parse hoặc of của LocalDate tạo các đối tượng mới và lưu ở ô nhớ khác nhau
	D là ngày trong năm, d là ngày trong tháng
	Hàm tạo gọi đến hàm tạo khác bằng cách sử dụng this()
	float, double không được dùng trong switch
	constructor có thể gọi constructor khác bằng cách tạo mới đối tượng ( sử dụng new ) nhưng với cách này sẽ không tạo đối tượng theo ý muốn. Hãy dùng this() ( khi dùng this() thì phải là câu lệnh đầu tiên trong hàm tạo
   
   
